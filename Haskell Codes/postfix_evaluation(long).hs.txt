
----------------------------------- l is the indexed list ---------------------------------
l :: [Char] -> [(Char,Int)]
l str = [(x,i)| (x,i) <- zip str [0..] ]
-------------------------------------------------------------------------------------------


{--------------------------------------Another Way-----------------------------------------
---------------------- li is the list of indexes at which spaces occur---------------------
li :: [(Char,Int)] -> [Int]
li [] = -1
li ((x,i):xs) = if x==' ' then (i:(li xs)) else (li xs)
------------------------------------------------------------------------------------------}

 


----------------------------or direct way for getting list li------------------------------
li :: [Char]->[Int] 
li str = [i| (x,i)<- zip str [0..length (str)], x==' ']
-------------------------------------------------------------------------------------------
     



--------------------------- p is the list without any spaces ------------------------------
p :: [Int] -> [(Char,Int)] -> [Char]

p [] ((x,i):xs) = x:(p [] xs)

p [] [] = [] 

p (y:ys) ((x,i):xs) = if (y/=i) then (x:(p (y:ys) xs)) else (p ys xs)
-------------------------------------------------------------------------------------------




----------------- 'tokenize' is the tokenized list of the input string --------------------
tokenized :: [Int] -> [Char] -> [[Char]]

tokenized [] l = [l]

tokenized [] [] = []

tokenized (j:js) p = (take j p ):(tokenized ([(x-j-1)| x<- js]) (drop j p))	
-------------------------------------------------------------------------------------------


--------------------------func' evaluats the tokenized list--------------------------------
func' :: [[Char]]->[Int]
func' [] = []
func' (x:xs) = func (x:xs) []
			where 
			func [] l = l
			func (x:xs) l 	| ((x/="*") && (x/="+") && (x/="/")) = func xs  ((read x::Int):l) 
					| x=="*" = [(head (tail l))*(head l)]++(drop 3 l)
					| x=="+" = [(head (tail l))+(head l)]++(drop 3 l)
					| x=="-" = [(head (tail l))-(head l)]++(drop 3 l)
					| x=="/" = [(head (tail l))`div`(head l)]++(drop 3 l)
-------------------------------------------------------------------------------------------



{-----------------------------------   Test Run   ----------------------------------------Eg: How to run this in WinHugs or Hugs

just type
func' (tokenized (li "23 58 *") (p (li "23 58 *") (l "23 58 *"))) 

another Eg:
func' (tokenized (li "30 2 3 + 5 * -") (p (li "30 2 3 + 5 * -") (l "30 2 3 + 5 * -")))
------------------------------------------------------------------------------------------}



